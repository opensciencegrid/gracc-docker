input {
    rabbitmq {
        host => "${AMQP_HOST:localhost}"
        port => "${AMQP_PORT:5672}"
        ssl => "${AMQP_SSL:false}"
        vhost => "${AMQP_VHOST:/}"
        user => "${AMQP_USER:guest}"
        password => "${AMQP_PASSWORD:guest}"

        exchange => "gracc.${GRACC_STREAM}.raw"
        exchange_type => "fanout"
        queue => "${GRACC_INSTANCE}.${GRACC_STREAM}.raw3"
        durable => true

        codec => "json"

        #Setting the type field of an event that already has a type field will not be successfull 
        #(i.e The new type value will not override the existing type value)
        type => "JobUsageRecord" 
    }
}
filter {
    # DO NOT ADD ANY DERIVED FIELDS BEFORE FINGERPRINT.
    # The checksum should be as close to the original source as possible to avoid introducing duplicates.
    # Convert numeric fields (don't add any more conversions here, these are kept before the checksum for historical reasons).
    mutate {
        convert => {
            "Processors" => "integer"
            "Memory" => "float"
            "Swap" => "float"
            "Network" => "float"
            "Njobs" => "integer"
            "NodeCount" => "integer"
        }
    }
    # Calculate fingerprint
    #  - Remove select fields, based on fields omitted by Gratia
    #  - Sort remaining fields
    #  - Generate JSON
    #  - Calculate MD5
    ruby {
        code => "
            require 'openssl'
            require 'json'
            excl_keys = ['RecordId','CreateTime','GlobalUsername','LocalUserId',
                      'VOName','ReportableVOName','CommonName','SiteName','Grid',
                      'RawXML','type','@timestamp','@received','@version']
            rec_to_hash = event.to_hash.reject {|k,v| excl_keys.include?(k)}
            rec_str = Hash[rec_to_hash.sort].to_json
            event.set('checksum',OpenSSL::Digest.hexdigest('md5',rec_str))
        "
    }

    mutate {
        add_field => { "@received" => "%{@timestamp}" }
    }

    if [type] == "JobUsageRecord" { 

        # Fix overloaded fields
        if [ResourceType] == "Payload" {
            mutate {
                add_field => {"PayloadSiteName" => "%{Host_description}"}
            }
        }

        # Pre-compute derived fields
        ruby {
            code => "event.set('CoreHours', Float(event.get('WallDuration') || 0.0) * Float(event.get('Processors') || 1.0) / 3600.0)"
        }

        if [QueueTime] {
            date {
                match => [ 'QueueTime', 'ISO8601' ]
            }
        }
        # use EndTime as logstash timestamp
        if [EndTime] {
            date {
                match => [ 'EndTime', 'ISO8601' ]
            }
        } else {

            # Try to calculate EndTime. Quarantine if we can't
            ruby {
                code => "
                    if event.include?('StartTime') && event.include?('WallDuration') then
                        start = Time.parse(event.get('StartTime'))
                        wall = event.get('WallDuration').to_i
                        endt = start + wall
                        recv = Time.parse(event.get('@received'))
                        if endt > recv then
                            endt = recv
                            start = endt - wall
                            event.set('StartTime', start.iso8601(3))
                        end
                        event.set('EndTime', endt.iso8601(3))
                        event.set('@timestamp', LogStash::Timestamp.new(endt))
                    else
                        if not event.get('Quarantine') then
                            event.set('Quarantine', 'MissingEndTime')
                        end
                     end
                "
            }
        }
    
        if (![StartTime]) {
            # Try to calculate StartTime. Quarantine if we can't
            ruby {
                code => "
                    if event.include?('EndTime') && event.include?('WallDuration') then
                        endt = Time.parse(event.get('EndTime'))
                        wall = event.get('WallDuration').to_i
                        start = endt - wall
                        event.set('StartTime', start.iso8601(3))
                    else
                        if not event.get('Quarantine') then
                            event.set('Quarantine', 'MissingStartTime')
                        end
                    end
                "
            }
        }

        ruby {
            code => " event.set('Quarantine','EpochStartTime') if (event.include?('StartTime') and Time.parse(event.get('StartTime')).to_i <= 86400) "
        }
        
    } else {
        # use Timestamp as logstash timestamp
        if [Timestamp] {
            date {
                match => [ 'Timestamp', 'ISO8601' ]
            }
        }  
    }   
}
output {
    if [Quarantine] {
        elasticsearch {
            hosts => [ "${ELASTICSEARCH_HOST:localhost}" ]
            index => "gracc.${GRACC_STREAM}.raw3-quarantine"
            document_id => "%{checksum}"
            template_name => "gracc.raw3"
            template => "/etc/gracc-stash/gracc-raw-template.json"
            manage_template => true
            template_overwrite => true
        }
    } else {
        elasticsearch {
            hosts => [ "${ELASTICSEARCH_HOST:localhost}" ]
            index => "gracc.${GRACC_STREAM}.raw3-%{+YYYY.MM}"
            document_id => "%{checksum}"
            template_name => "gracc.raw3"
            template => "/etc/gracc-stash/gracc-raw-template.json"
            manage_template => true
            template_overwrite => true
        }
    }
    #stdout {codec => "rubydebug"}
}
